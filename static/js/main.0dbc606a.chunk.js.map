{"version":3,"sources":["components/Block.js","components/Trial.js","components/Introduction.js","components/EndScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Format","Object","freeze","TEXT","BUBBLE","Block","props","logOnClickResult","d","values","format","n","startTime","curentIteration","advanceIteration","userID","addResults","diffInSeconds","Date","now","reactionTime","Math","round","Number","EPSILON","selectedAnswer","srcElement","__data__","correctAnswer","d3","maxVal","minVal","error","abs","results","Iteration","toFixed","console","log","RenderBlock","remove","numCol","numRow","font_size","svg","blockRef","current","NB_VALUES","map","floor","random","_w","_h","scales","x","range","padding","align","y","paddingInner","maxCircleRadius","bandwidth","step","sign","selectAll","data","enter","append","attr","i","pad","on","style","circleRadiusScale","domain","sqrt","text","React","createRef","this","ref","height","width","Component","Trial","showInstruction","instructType","trialInstructionScreen","children","Introduction","id","type","onClick","onBeginExperiment","EndScreen","uID","result","submitButton","onSubmit","className","showSubmitButton","submissionStatusObject","href","keys","key","headerIndex","item","index","val","innerIndex","DataSubmissionStatus","NOT_SUBMITTED","SUCCESFUL","FAILED","App","beginExperiment","setState","showIntro","onSpacebarClicked","event","state","keyCode","advanceTrial","currentTrial","newResult","submitHandler","e","preventDefault","axios","post","process","then","response","dataSubmitted","catch","whatToShow","trialParameters","length","iterationPerTrial","text_trialParameters","bubble_trialParameters","concat","document","addEventListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0dbc606a.chunk.js","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\n\nexport const Format = Object.freeze({ TEXT: 'Text', BUBBLE: 'Bubble' });\n\nexport class Block extends React.Component {\n    constructor(props) {\n        super(props);\n        this.blockRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.RenderBlock();\n    }\n\n    componentDidUpdate() {\n        this.RenderBlock();\n    }\n\n    logOnClickResult = (d, values) => {\n        const {\n            format,\n            n,\n            startTime,\n            curentIteration,\n            advanceIteration,\n            userID,\n            addResults,\n        } = this.props;\n\n        const endTime = Date.now();\n        const diffInSeconds = (endTime - startTime) / 1000;\n        const reactionTime =\n            Math.round((diffInSeconds + Number.EPSILON) * 100) / 100;\n\n        const selectedAnswer = d.srcElement.__data__;\n        const correctAnswer = d3.median(values); \n            \n        const maxVal = d3.max(values);\n        const minVal = d3.min(values);\n\n        const error = Math.abs(\n            (correctAnswer - selectedAnswer) / (maxVal - minVal)\n        );\n        const roundedError = Math.round((error + Number.EPSILON) * 1000) / 1000;\n\n        const results = {\n            'Group code': 0,\n            'User ID': userID,\n            Format: format,\n            'Number of values': n,\n            Iteration: curentIteration,\n            'Reaction time (seconds)': reactionTime,\n            'Error (0-1)': roundedError.toFixed(2),\n        };\n\n        console.log(results);\n\n        addResults(results);\n        advanceIteration();\n    };\n\n    RenderBlock = () => {\n        // Get SVG and clear it before rendering\n        d3.selectAll('svg > *').remove();\n        const svg = d3.select(this.blockRef.current);\n\n        const { format, n } = this.props;\n\n        // The canvas size\n        var width = 400;\n        var height = 400;\n\n        const NB_VALUES = n;\n\n        // the randomly generated set of values between 0 and 99\n        var values = d3\n            .range(NB_VALUES)\n            .map((d) => Math.floor(Math.random() * 100));\n\n        var pad = 5; //padding for grid layout (text and bubble)\n        var numCol, numRow; // number of columns, number of rows\n        var font_size;\n\n        if (NB_VALUES === 11) {\n            numCol = 6;\n            numRow = 6;\n            font_size = 48;\n        } else if (NB_VALUES === 3 || NB_VALUES === 5 || NB_VALUES === 9) {\n            numCol = 3;\n            numRow = 3;\n            font_size = 48;\n        } else {\n            return null;\n        }\n\n        const _w = width / numCol;\n        const _h = height / numRow;\n\n        const scales = {};\n        scales.x = d3.scalePoint().range([0, _w]).padding(0.5).align(1);\n        scales.y = d3.scaleBand().range([0, _h]).paddingInner(0.3);\n\n        const maxCircleRadius =\n            d3.min([scales.y.bandwidth(), scales.x.step()]) / 2;\n\n        var sign = svg\n            .selectAll('g')\n            .data(values)\n            .enter()\n            .append('g')\n            .attr('transform', function(d, i) {\n                return (\n                    'translate(' +\n                    ((i % numCol) * _w + (pad / 2) * -1) +\n                    ',' +\n                    (Math.floor(i / numRow) * _h + (pad / 2) * -1) +\n                    ')'\n                );\n            })\n            .on('click', (d) => this.logOnClickResult(d, values))\n            .style('cursor', 'pointer');\n\n        if (format === Format.BUBBLE) {\n            //that's to create a perceptual scaling by mapping square root of value to radius, but other scaling functions could be used\n            var circleRadiusScale = d3\n                .scaleLinear()\n                .domain([Math.sqrt(d3.min(values)), Math.sqrt(d3.max(values))])\n                .range([5, maxCircleRadius]);\n\n            //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\n            sign.append('circle')\n                .attr('cx', _w / 2)\n                .attr('cy', _w / 2)\n                .attr('r', maxCircleRadius / 2)\n                .style('fill', 'white');\n\n            // then, for each cell we appends a circle\n            sign.append('circle')\n                .attr('cx', _w / 2)\n                .attr('cy', _w / 2)\n                .attr('r', (d) => circleRadiusScale(Math.sqrt(d)))\n                .style('fill', 'black');\n        } else if (format === Format.TEXT) {\n            //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\n            sign.append('circle')\n                .attr('cx', _w / 2)\n                .attr('cy', _w / 2)\n                .attr('r', maxCircleRadius / 2)\n                .style('fill', 'white');\n\n            sign.append('text')\n                .attr('x', _w / 2)\n                .attr('y', _w / 2)\n                .attr('text-anchor', 'middle')\n                .attr('font-size', font_size + 'px')\n                .text((d) => d);\n        }\n    };\n\n    render() {\n        return (\n            <svg ref={this.blockRef}\n            style = {\n                { height: 400, width: 400 }\n            } > </svg>\n        );\n    }\n}","import React from 'react';\n\nexport default class Trial extends React.Component {\n    render() {\n        const {\n            format,\n            n,\n            showInstruction,\n            instructType,\n            curentIteration,\n        } = this.props;\n\n        const trialInstructionScreen = (\n            <div>\n                <h1>{`${format} phase`}</h1>\n                <p>\n                    {instructType === 1\n                        ? `Perform the required task for a group of ${n} numbers`\n                        : `Now do the same for a group of ${n} numbers`}\n                </p>\n                <p>{'Press Space to Continue'}</p>\n            </div>\n        );\n\n        if (showInstruction) {\n            return trialInstructionScreen;\n        } else {\n            return (\n                <div>\n                    <h1>{`Iteration ${curentIteration}`}</h1>\n                    {this.props.children}\n                </div>\n            );\n        }\n    }\n}\n","import React from 'react';\n\nexport default class Introduction extends React.Component {\n    render() {\n        return (\n            <div id={'Introduction'}>\n                <h1>HCI UVic Course Experiment</h1>\n                <p>By Paria Naghavi and Sharon Umute</p>\n                <p>Used and Editted by Richa Bhute and Mona Soleimanieh</p>\n                <div>\n                    <h3>\n                        Effectiveness of text representations against bubble representations, \n                        in finding the median value.\n                    </h3>\n                    For this experiment, you will be shown a series of numbers\n                    represented as either text or circles of corresponding\n                    sizes.\n                    <p>\n                        <b>Instructions:<br /></b> {' '}\n                        <b>1. Click the median number/circle as fast as you\n                        can. </b> \n                        <b><br />The median will be the middle most value<br /> among all the values,</b> \n                        <b> that you visually or textually see.<br /></b>\n                        <b>2. Click submit upon finishing all the tasks, once the results are shown so we can gather data.<br /></b>\n                        <b>3. Finish the exit survey.<br /></b>\n                    </p>\n                </div>\n                <p>Click the button below to begin the experiment</p>\n                <button type={'submit'} onClick={this.props.onBeginExperiment}>\n                    Begin\n                </button>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nexport default class EndScreen extends React.Component {\n    render() {\n        const results = this.props.results;\n\n        const uID = results[0]['User ID'];\n\n        var data = results.map((result) => {\n            return {\n                Format: result.Format,\n                'Number of values': result['Number of values'],\n                Iteration: result.Iteration,\n                'Reaction time (seconds)': result['Reaction time (seconds)'],\n                'Error (0-1)': result['Error (0-1)'],\n            };\n        });\n\n        const submitButton = (\n            <div>\n                <p>\n                    Click the button below to submit your results for analysis\n                </p>\n                <button type={'submit'} onClick={this.props.onSubmit}>\n                    Submit\n                </button>\n            </div>\n        );\n\n        return (\n            <div className=\"App\">\n                <h2 id={'Thanks'}>Thank you for participating</h2>\n                <p id={'UID'}>{`User ID: ${uID}`}</p>\n                <p>Your results are below</p>\n                {this.props.showSubmitButton ? submitButton\n                    : this.props.submissionStatusObject}\n            \n                <p>Please complete the following exit questionnaire</p>\n                <a href=\"https://docs.google.com/forms/d/e/1FAIpQLScTHNxcAx3Avxyldl-AHG9RzCZThL8jNWGqVLkMA9i8HCxIZg/viewform\"> Here</a>\n                               \n                <table>\n                    <thead>\n                        <tr key={'header'}>\n                            {Object.keys(data[0]).map((key, headerIndex) => (\n                                <th key={headerIndex}>{key}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map((item, index) => (\n                            <tr key={index}>\n                                {Object.values(item).map((val, innerIndex) => (\n                                    <td key={innerIndex}>{val}</td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Block, Format } from './components/Block';\nimport Trial from './components/Trial';\nimport Introduction from './components/Introduction';\nimport EndScreen from './components/EndScreen';\nimport './App.css';\nimport axios from 'axios';\nimport 'dotenv';\n\n\nexport const DataSubmissionStatus = Object.freeze({\n    NOT_SUBMITTED: 1,\n    SUCCESFUL: 2,\n    FAILED: 3,\n});\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentTrial: 0,\n            showInstruction: true,\n            curentIteration: 1,\n            results: [],\n            showIntro: true,\n            dataSubmitted: DataSubmissionStatus.NOT_SUBMITTED,\n        };\n\n        this.userID = Math.floor(Math.random() * 90000) + 10000;\n\n        this.iterationPerTrial = 3;\n\n        this.text_trialParameters = [\n            { format: Format.TEXT, n: 3, instructType: 1 },\n            { format: Format.TEXT, n: 5, instructType: 2 },\n            { format: Format.TEXT, n: 9, instructType: 2 },\n            { format: Format.TEXT, n: 11, instructType: 2 },\n        ];\n\n        this.bubble_trialParameters = [\n            { format: Format.BUBBLE, n: 3, instructType: 1 },\n            { format: Format.BUBBLE, n: 5, instructType: 2 },\n            { format: Format.BUBBLE, n: 9, instructType: 2 },\n            { format: Format.BUBBLE, n: 11, instructType: 2 },\n        ];\n\n        this.trialParameters =\n            this.userID % 2 === 0\n                ? this.text_trialParameters.concat(this.bubble_trialParameters)\n                : this.bubble_trialParameters.concat(this.text_trialParameters);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.onSpacebarClicked);\n    }\n\n    componentDidUpdate() {\n        if (this.state.curentIteration > this.iterationPerTrial) {\n            this.advanceTrial();\n        }\n    }\n\n    beginExperiment = () => {\n        this.setState({\n            showIntro: false,\n        });\n    };\n\n    onSpacebarClicked = (event) => {\n        if (\n            this.state.showInstruction &&\n            (event.key === 'Spacebar' ||\n                event.key === ' ' ||\n                event.keyCode === 32)\n        ) {\n            this.setState({\n                showInstruction: false,\n            });\n        }\n    };\n\n    advanceIteration = () => {\n        this.setState({\n            curentIteration: this.state.curentIteration + 1,\n        });\n    };\n\n    advanceTrial = () => {\n        this.setState({\n            currentTrial: this.state.currentTrial + 1,\n            curentIteration: 1,\n            showInstruction: true,\n        });\n    };\n\n    addResults = (newResult) => {\n        this.setState({\n            results: [...this.state.results, newResult],\n        });\n    };\n\n    submitHandler = (e) => {\n        e.preventDefault();\n        console.log(this.state.results);\n\n        axios.post(`${process.env.REACT_APP_GOOGLE_SHEETS}`, this.state.results)\n            .then((response) => {\n                console.log(response);\n                this.setState({\n                    dataSubmitted: DataSubmissionStatus.SUCCESFUL,\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                this.setState({\n                    dataSubmitted: DataSubmissionStatus.FAILED,\n                });\n            });\n    };\n\n    whatToShow = () => {\n        if (this.state.showIntro) {\n            return <Introduction onBeginExperiment={this.beginExperiment} />;\n        } else if (this.state.currentTrial === this.trialParameters.length) {\n            var submissionStatusObject = null;\n\n            if (this.state.dataSubmitted === DataSubmissionStatus.SUCCESFUL) {\n                submissionStatusObject = (\n                    <div className={'submittedSuccessfully'}>\n                        Data submission complete\n                    </div>\n                );\n            } else if (\n                this.state.dataSubmitted === DataSubmissionStatus.FAILED\n            ) {\n                submissionStatusObject = (\n                    <div className={'submittedFailed'}>\n                        Data submission failed\n                    </div>\n                );\n            }\n\n            return (\n                <EndScreen\n                    results={this.state.results}\n                    showSubmitButton={\n                        this.state.dataSubmitted ===\n                        DataSubmissionStatus.NOT_SUBMITTED\n                    }\n                    submissionStatusObject={submissionStatusObject}\n                    onSubmit={this.submitHandler}\n                />\n            );\n        } else {\n            return (\n                <Trial\n                    format={\n                        this.trialParameters[this.state.currentTrial].format\n                    }\n                    n={this.trialParameters[this.state.currentTrial].n}\n                    showInstruction={this.state.showInstruction}\n                    instructType={\n                        this.trialParameters[this.state.currentTrial]\n                            .instructType\n                    }\n                    curentIteration={this.state.curentIteration}\n                >\n                    <Block\n                        format={\n                            this.trialParameters[this.state.currentTrial].format\n                        }\n                        n={this.trialParameters[this.state.currentTrial].n}\n                        startTime={Date.now()}\n                        curentIteration={this.state.curentIteration}\n                        advanceIteration={this.advanceIteration}\n                        userID={this.userID}\n                        addResults={this.addResults}\n                    />\n                </Trial>\n            );\n        }\n    };\n\n    render() {\n        return <div className=\"App\">{this.whatToShow()}</div>;\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}